"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LibreLinkUpClient = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _axios = _interopRequireDefault(require("axios"));
var _jsSha = require("js-sha256");
var _utils = require("./utils");
var LIBRE_LINK_SERVER = 'https://api-us.libreview.io';
var urlMap = {
  login: '/llu/auth/login',
  connections: '/llu/connections',
  countries: '/llu/config/country?country=DE'
};
var LibreLinkUpClient = function LibreLinkUpClient(_ref) {
  var username = _ref.username,
    password = _ref.password,
    clientVersion = _ref.clientVersion,
    connectionIdentifier = _ref.connectionIdentifier;
  var jwtToken = null;
  var accountId = null;
  var connectionId = null;
  var instance = _axios["default"].create({
    baseURL: LIBRE_LINK_SERVER,
    headers: {
      'accept-encoding': 'gzip',
      'cache-control': 'no-cache',
      connection: 'Keep-Alive',
      'content-type': 'application/json',
      product: 'llu.android',
      version: clientVersion !== null && clientVersion !== void 0 ? clientVersion : '4.12.0',
      'account-id': ''
    }
  });
  instance.interceptors.request.use(function (config) {
    if (jwtToken && config.headers && accountId) {
      // eslint-disable-next-line no-param-reassign
      config.headers.authorization = "Bearer ".concat(jwtToken);
      // eslint-disable-next-line no-param-reassign
      config.headers['account-id'] = (0, _jsSha.sha256)(accountId);
    }
    return config;
  }, function (e) {
    return e;
  }, {
    synchronous: true
  });
  var login = /*#__PURE__*/function () {
    var _ref2 = (0, _asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee() {
      var loginResponse, _step, redirectResponse, countryNodes, targetRegion, regionDefinition;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return instance.post(urlMap.login, {
                email: username,
                password: password
              });
            case 2:
              loginResponse = _context.sent;
              if (!(loginResponse.data.status === 2)) {
                _context.next = 5;
                break;
              }
              throw new Error('Bad credentials. Please ensure that you have entered the credentials of your LibreLinkUp account (and not of your LibreLink account).');
            case 5:
              if (!(loginResponse.data.status === 4)) {
                _context.next = 7;
                break;
              }
              throw new Error("Additional action required for your account: ".concat(((_step = loginResponse.data.data.step) === null || _step === void 0 ? void 0 : _step.componentName) || 'unknown', ". Please login via app and perform required steps and try again."));
            case 7:
              if (!loginResponse.data.data.redirect) {
                _context.next = 18;
                break;
              }
              redirectResponse = loginResponse.data;
              _context.next = 11;
              return instance.get(urlMap.countries);
            case 11:
              countryNodes = _context.sent;
              targetRegion = redirectResponse.data.region;
              regionDefinition = countryNodes.data.data.regionalMap[targetRegion];
              if (regionDefinition) {
                _context.next = 16;
                break;
              }
              throw new Error("Unable to find region '".concat(redirectResponse.data.region, "'. \n          Available nodes are ").concat(Object.keys(countryNodes.data.data.regionalMap).join(', '), "."));
            case 16:
              instance.defaults.baseURL = regionDefinition.lslApi;
              return _context.abrupt("return", login());
            case 18:
              jwtToken = loginResponse.data.data.authTicket.token;
              accountId = loginResponse.data.data.user.id;
              return _context.abrupt("return", loginResponse.data);
            case 21:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return function login() {
      return _ref2.apply(this, arguments);
    };
  }();
  var loginWrapper = function loginWrapper(func) {
    return /*#__PURE__*/(0, _asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee2() {
      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              if (jwtToken) {
                _context2.next = 4;
                break;
              }
              _context2.next = 4;
              return login();
            case 4:
              return _context2.abrupt("return", func());
            case 7:
              _context2.prev = 7;
              _context2.t0 = _context2["catch"](0);
              _context2.next = 11;
              return login();
            case 11:
              return _context2.abrupt("return", func());
            case 12:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[0, 7]]);
    }));
  };
  var getConnections = loginWrapper(/*#__PURE__*/(0, _asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee3() {
    var response;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return instance.get(urlMap.connections);
          case 2:
            response = _context3.sent;
            return _context3.abrupt("return", response.data);
          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })));
  var getConnection = function getConnection(connections) {
    if (typeof connectionIdentifier === 'string') {
      var match = connections.find(function (_ref5) {
        var firstName = _ref5.firstName,
          lastName = _ref5.lastName;
        return "".concat(firstName, " ").concat(lastName).toLowerCase() === connectionIdentifier.toLowerCase();
      });
      if (!match) {
        throw new Error("Unable to identify connection by given name '".concat(connectionIdentifier, "'."));
      }
      return match.patientId;
    }
    if (typeof connectionIdentifier === 'function') {
      var _match = connectionIdentifier.call(null, connections);
      if (!_match) {
        throw new Error("Unable to identify connection by given name function");
      }
      return _match;
    }
    return connections[0].patientId;
  };
  var readRaw = loginWrapper(/*#__PURE__*/(0, _asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee4() {
    var connections, response;
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (connectionId) {
              _context4.next = 7;
              break;
            }
            _context4.next = 3;
            return getConnections();
          case 3:
            connections = _context4.sent;
            if (!(connections.data.length === 0)) {
              _context4.next = 6;
              break;
            }
            throw new Error('Your account does not follow any patients. Pleas start following and try again.');
          case 6:
            connectionId = getConnection(connections.data);
          case 7:
            _context4.next = 9;
            return instance.get("".concat(urlMap.connections, "/").concat(connectionId, "/graph"));
          case 9:
            response = _context4.sent;
            return _context4.abrupt("return", response.data.data);
          case 11:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  })));
  var read = /*#__PURE__*/function () {
    var _ref7 = (0, _asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee5() {
      var response;
      return _regenerator["default"].wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return readRaw();
            case 2:
              response = _context5.sent;
              return _context5.abrupt("return", {
                current: (0, _utils.mapData)(response.connection.glucoseMeasurement),
                history: response.graphData.map(_utils.mapData)
              });
            case 4:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));
    return function read() {
      return _ref7.apply(this, arguments);
    };
  }();
  var observe = /*#__PURE__*/function () {
    var _ref8 = (0, _asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee6() {
      return _regenerator["default"].wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));
    return function observe() {
      return _ref8.apply(this, arguments);
    };
  }();
  var averageInterval;
  var readAveraged = /*#__PURE__*/function () {
    var _ref9 = (0, _asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee8(amount, callback) {
      var interval,
        mem,
        _args8 = arguments;
      return _regenerator["default"].wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              interval = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : 15000;
              mem = new Map();
              averageInterval = setInterval(/*#__PURE__*/(0, _asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee7() {
                var _yield$read, current, history, memValues, averageValue, averageTrend;
                return _regenerator["default"].wrap(function _callee7$(_context7) {
                  while (1) {
                    switch (_context7.prev = _context7.next) {
                      case 0:
                        _context7.next = 2;
                        return read();
                      case 2:
                        _yield$read = _context7.sent;
                        current = _yield$read.current;
                        history = _yield$read.history;
                        mem.set(current.date.toString(), current);
                        if (mem.size === amount) {
                          memValues = Array.from(mem.values());
                          averageValue = Math.round(memValues.reduce(function (acc, cur) {
                            return acc + cur.value;
                          }, 0) / amount);
                          averageTrend = _utils.trendMap[parseInt((Math.round(memValues.reduce(function (acc, cur) {
                            return acc + _utils.trendMap.indexOf(cur.trend);
                          }, 0) / amount * 100) / 100).toFixed(0), 10)];
                          mem = new Map();
                          callback.apply(null, [{
                            trend: averageTrend,
                            value: averageValue,
                            date: current.date,
                            isHigh: current.isHigh,
                            isLow: current.isLow
                          }, memValues, history]);
                        }
                      case 7:
                      case "end":
                        return _context7.stop();
                    }
                  }
                }, _callee7);
              })), interval);
              return _context8.abrupt("return", function () {
                return clearInterval(averageInterval);
              });
            case 4:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));
    return function readAveraged(_x, _x2) {
      return _ref9.apply(this, arguments);
    };
  }();
  return {
    observe: observe,
    readRaw: readRaw,
    read: read,
    readAveraged: readAveraged,
    login: login
  };
};
exports.LibreLinkUpClient = LibreLinkUpClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,